---

- name: install role dependencies
  apt:
    name: "{{ ansible_install_packages }}"
    state: latest

- name: get list of installed packages
  package_facts:
    manager: auto
  register: packages_list

- name: Create a copy of Current packages List
  copy:
    content: '{{ packages_list | to_nice_yaml }}'
    dest: /tmp/{{inventory_hostname}}_{{ansible_date_time.date}}_packages_list.txt

- name: Hold Packages from updating
  shell: apt-mark hold "{{ item }}"
  when: 'item in ansible_facts.packages'
  with_items: 
    - "{{ ansible_blacllist_packages }}"

- name: Unhold Packages from updating
  shell: apt-mark unhold "{{ item }}"
  when: 'ansible_unhold_packages is defined'
  with_items: 
    - "{{ ansible_unhold_packages }}"

- name: Update the packages 
  apt:
    name: '*'
    state: latest
    update_cache: yes
  ignore_errors: yes
- name: Check  10periodic is exist
  stat:
    path: "{{ ansible_10periodic_path }}"
  register: file_to_delete

- name: remove  10periodic
  file:
    state: absent
    path: "{{ ansible_10periodic_path }}"
  when: file_to_delete.stat.exists == true

- name: create APT auto-upgrades configuration
  template:
    src: auto-upgrades.j2
    dest: /etc/apt/apt.conf.d/20auto-upgrades
    owner: root
    group: root
    mode: 0644

- name: copy the unattended-upgrades Configuration file 
  template:
    src: unattended-upgrades.j2
    dest: /etc/apt/apt.conf.d/50unattended-upgrades
    owner: root
    group: root
    mode: 0644

- name: Check for pending restart 
  shell: "[ -f /var/run/reboot-required ]"
  failed_when: false
  register: reboot_required
  changed_when: reboot_required.rc == 0
  notify: reboot system
  when: ansible_restart_server == True

- name: flush hanlers
  meta: flush_handlers

- name: Get service facts
  service_facts:

- name: Check the Service Status after the Restart
  debug:
    var: ansible_facts.services['{{item}}']['state']
  when: 'ansible_check_services is defined'
  with_items: 
    - "{{ansible_check_services}}"

- name: Start services if not running
  service:
    name: "{{item}}"
    state: started
  when: ansible_facts.services['{{item}}']['state'] != 'running' and ansible_check_services is defined
  with_items:
    - "{{ansible_check_services}}"
